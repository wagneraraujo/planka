version: '3.8'

services:
  planka:
    build:
      context: .
      dockerfile: Dockerfile
    image: planka:latest
    restart: unless-stopped
    volumes:
      - user-avatars:/app/public/user-avatars
      - project-background-images:/app/public/project-background-images
      - attachments:/app/private/attachments
    ports:
      - '3000:1337'
    environment:
      - NODE_ENV=production
      - BASE_URL=${BASE_URL:-http://localhost:3000}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/planka
      - SECRET_KEY=${SECRET_KEY:-changethisinproduction}
      - TRUST_PROXY=${TRUST_PROXY:-0}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN:-365}
    networks:
      - planka-network
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:1337/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=planka
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secretpassword}
      - POSTGRES_USER=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - planka-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d planka']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

networks:
  planka-network:
    driver: bridge

volumes:
  user-avatars:
    driver: local
  project-background-images:
    driver: local
  attachments:
    driver: local
  db-data:
    driver: local
